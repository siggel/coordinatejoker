//apply plugin: 'com.android.application'
plugins {
    id 'com.android.application'
    id 'org.cyclonedx.bom' version '2.2.0'
}

android {
    signingConfigs {
    }
    //noinspection GrDeprecatedAPIUsage
    compileSdkVersion 36

    defaultConfig {
        applicationId 'com.github.siggel.coordinatejoker'
        minSdkVersion 21
        targetSdkVersion 35
        versionCode 40
        // do not simplify the following to concatenation with versionCode, as F-Droid will not handle it correctly
        versionName "1.4.40"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled true
            //useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    namespace 'com.github.siggel.coordinatejoker'
    buildFeatures {
        buildConfig true
    }
}

android.applicationVariants.configureEach { variant ->
    variant.outputs.configureEach {
        outputFileName = applicationId
        outputFileName += "-" + android.defaultConfig.versionName
        if (variant.buildType.name == "release") {
            outputFileName += ".apk"
        } else {
            outputFileName += "-debug.apk"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'net.objecthunter:exp4j:0.4.8'
    implementation 'com.github.asamm:logger-asamm:2.2'
    implementation 'com.asamm:locus-api-android:0.9.64'
    implementation 'androidx.preference:preference:1.2.1'
    implementation 'com.google.android.material:material:1.12.0'

    // test
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.1'
}

afterEvaluate {
    buildHtmlFromSBOM.dependsOn(cyclonedxBom)
    preBuild.dependsOn(buildHtmlFromSBOM)
    assembleRelease.finalizedBy(copyEnglishReleaseNotesForFDroid)
    assembleRelease.finalizedBy(copyGermanReleaseNotesForFDroid)
    assembleDebug.finalizedBy(copyEnglishReleaseNotesForFDroid)
    assembleDebug.finalizedBy(copyGermanReleaseNotesForFDroid)
}

tasks.register('copyGermanReleaseNotesForFDroid', Copy) {
    from "src/main/assets"
    include "changes_version_*_de.html"
    into "../fastlane/metadata/android/de-DE/changelogs"
    filter { line -> line.replaceAll('\\s*<p>\\s*', '') }
    filter { line -> line.replaceAll('<\\s*/p>\\s*', '') }
    filter { line -> line.replaceAll('\\s*<ul>\\s*', '') }
    filter { line -> line.replaceAll('\\s*</ul>\\s*', '') }
    filter { line -> line.replaceAll('\\s*<li>\\s*', '- ') }
    filter { line -> line.replaceAll('\\s*</li>\\s*', '') }
    rename '.+_([0-9]+)_de.html', '$1.txt'
}

tasks.register('copyEnglishReleaseNotesForFDroid', Copy) {
    from "src/main/assets"
    include "changes_version_*_en.html"
    into "../fastlane/metadata/android/en-US/changelogs"
    filter { line -> line.replaceAll('\\s*<p>\\s*', '') }
    filter { line -> line.replaceAll('<\\s*/p>\\s*', '') }
    filter { line -> line.replaceAll('\\s*<ul>\\s*', '') }
    filter { line -> line.replaceAll('\\s*</ul>\\s*', '') }
    filter { line -> line.replaceAll('\\s*<li>\\s*', '- ') }
    filter { line -> line.replaceAll('\\s*</li>\\s*', '') }
    rename '.+_([0-9]+)_en.html', '$1.txt'
}

tasks.register('buildHtmlFromSBOM', Copy) {
    from "../docs"
    include "sbom.json"
    into "src/main/assets"
    // remove first and last line of json (brackets without indentation)
    filter { String line -> line.startsWith('{') ? null : line }
    filter { String line -> line.startsWith('}') ? null : line }
    // remove all lines about the app itself
    filter { String line -> line.contains('coordinatejoker') ? null : line }
    // remove all lines except for the library package and license id
    // start new paragraph with each pkg:maven entry and shift leftmost
    filter { String line -> line.replaceFirst(' +"bom-ref" : "pkg:maven/', '<p>') }
    // we are not interested in the type info, instead insert a : to be later followed by license name
    filter { String line -> line.replaceFirst('\\?type=.*', ': ') }
    // "id" lines contain the license name, also shift leftmost
    filter { String line -> line.replaceFirst(' +"id" : "', '') }
    // " are only left after the license name, those end the paragraph
    filter { String line -> line.replaceAll('".*', '</p>') }
    // everything that is still indented is not of interest
    filter { String line -> line.startsWith(' ') ? null : line }
    // repair logger-asamm that is missing license field, manually set it to MIT and end paragraph
    filter { String line -> line.contains('logger-asamm') ? line + '\nMIT</p>' : line }
    rename 'sbom.json', 'sbom.html'
    // uncomment this when changing this task to enforce applying the change
    //outputs.upToDateWhen { false }
}

cyclonedxBom {
    // includeConfigs is the list of configuration names to include when generating the BOM (leave empty to include every configuration), regex is supported
    includeConfigs = ["implementation", "runtimeClasspath", "releaseImplementation", "releaseRuntimeClasspath"]
    // skipConfigs is a list of configuration names to exclude when generating the BOM, regex is supported
    skipConfigs = ['testImplementation']
    // Specified the type of project being built. Defaults to 'library'
    projectType = "application"
    // SBOM destination directory. Defaults to 'build/reports'
    destination = file("../docs")
    // The file name for the generated BOMs (before the file format suffix). Defaults to 'bom'
    outputName = "sbom"
    // The file format generated, can be xml, json or all for generating both. Defaults to 'all'
    outputFormat = "json"
    // Include License Text. Defaults to 'true'
    includeLicenseText = true
    // Override component version. Defaults to the project version
    componentVersion = android.defaultConfig.versionName
    includeBomSerialNumber = false
}
